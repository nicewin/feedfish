{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC3C,IAAI,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;AAEvC,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;AACR,oBAAY,EAAE,EAAE,CAAC,MAAM;AACvB,mBAAW,EAAE,EAAE,CAAC,KAAK;AACrB,mBAAW,EAAE,EAAE,CAAC,IAAI;KACvB;;;AAGD,UAAM,EAAE,kBAAY;AAChB,YAAI,IAAI,GAAG,IAAI,CAAC;AAChB,UAAE,CAAC,MAAM,CAAC,OAAO,CAAC,wBAAwB,EAAE,UAAU,KAAK,EAAE,OAAO,EAAE;AAClE,gBAAI,KAAK,EAAE;AACP,kBAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;aACjB,MACI;AACD,oBAAI,CAAC,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AAChD,oBAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;AACpB,oBAAI,CAAC,UAAU,EAAE,CAAC;aACrB;SACJ,CAAC,CAAC;;AAEH,YAAI,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,YAAY;AACjC,gBAAI,CAAC,UAAU,EAAE,CAAC;SACrB,EAAE,IAAI,CAAC,CAAA;KACX;;AAED,cAAU,EAAE,sBAAY;AACpB,YAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO;;AAEzB,YAAI,CAAC,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC;AAChC,YAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;AAC9B,gBAAQ,IAAI,CAAC,IAAI;AACjB,iBAAK,UAAU,CAAC,IAAI,CAAC,MAAM;AACvB,oBAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1C,oBAAI,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;AACpD,sBAAM;AAAA,AACV,iBAAK,UAAU,CAAC,IAAI,CAAC,MAAM;AACvB,oBAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;AACrC,oBAAI,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC;AAC/B,oBAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAC3B,qBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;;AAE5C,wBAAI,MAAM,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;;AAE/C,0BAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AAC9D,wBAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;iBACrC;AACD,sBAAM;AAAA,SACT;KACJ;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "var DialogParser = require(\"DialogParser\");\nvar DialogData = require(\"DialogData\");\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        optionPrefab: cc.Prefab,\n        phraseLabel: cc.Label,\n        optionPanel: cc.Node\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        var self = this;\n        cc.loader.loadRes(\"dialogs/lileihanmeimei\", function (error, content) {\n            if (error) {\n                cc.log(error);\n            }\n            else {\n                self.dialog = DialogParser.parseDialog(content);\n                self.dialog.start();\n                self.stepDialog();\n            }\n        });\n\n        this.node.on('touchend', function () {\n            this.stepDialog();\n        }, this)\n    },\n\n    stepDialog: function () {\n        if (!this.dialog) return;\n\n        this.optionPanel.active = false;\n        var curr = this.dialog.next();\n        switch (curr.type) {\n        case DialogData.Type.PHRASE:\n            var role = this.dialog.getRole(curr.role);\n            this.phraseLabel.string = role + \": \" + curr.phrase;\n            break;\n        case DialogData.Type.OPTION:\n            this.optionPanel.removeAllChildren();\n            this.optionPanel.active = true;\n            var options = curr.options;\n            for (var i = 0, l = options.length; i < l; ++i) {\n// TODO: need use option object pool\n                var option = cc.instantiate(this.optionPrefab);\n// TODO: Add component to option prefab\n                option.children[0].getComponent(cc.Label).string = options[i];\n                this.optionPanel.addChild(option);\n            }\n            break;\n        }\n    }\n});\n"
  ]
}